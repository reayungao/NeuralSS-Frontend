import type { ExtractedEntities } from './onDeviceAiPlugin';

/**
 * Represents the core data structure for a screenshot in the application.
 * This interface includes both filesystem metadata and AI-generated content.
 */
export interface Screenshot {
  /** A unique identifier, typically the file name (e.g., "Screenshot_20230101-120000.png"). */
  id: string;
  /** The native filesystem URI for the original file (e.g., "file:///.../Screenshot.png"). */
  uri: string;
  /** A web-accessible path for the <img> src attribute, generated by Capacitor's server. */
  webPath: string;
  /** An optional web-accessible path for a smaller, optimized thumbnail to improve grid performance. */
  thumbnailWebPath?: string;
  /** A concise, AI-generated summary of the screenshot's content. */
  description: string;
  /** The original file name. */
  name: string;
  /** The creation or last modification time as a Unix timestamp in milliseconds. */
  creationTime: number;

  /** Full text extracted from the screenshot via OCR. Can be null if analysis fails or no text is found. */
  text?: string | null;
  /** Structured entities (URLs, emails) extracted from the text. Can be null if analysis fails. */
  entities?: ExtractedEntities | null;
  /** An AI-determined category for the screenshot (e.g., "Receipt", "Map", "Social Media"). Can be null. */
  category?: string | null;
}

/**
 * Represents a Screenshot that has successfully undergone AI analysis.
 * The optional AI-related fields from the base Screenshot type are now guaranteed to be present.
 */
export interface AnalyzedScreenshot extends Screenshot {
  /** Full text extracted from the screenshot via OCR. */
  text: string;
  /** Structured entities (URLs, emails) extracted from the text. */
  entities: ExtractedEntities;
  /** An AI-determined category for the screenshot. */
  category: string;
}

/**
 * Represents a structured error originating from the native plugin layer,
 * providing more context than a generic error message.
 */
export interface NativeError {
  /** A machine-readable error code (e.g., 'E_MODEL_NOT_FOUND', 'E_NO_PERMISSION'). */
  code: string;
  /** A human-readable message describing the error. */
  message: string;
}

/**
 * A TypeScript type guard to safely check if an unknown error object conforms to the NativeError interface.
 * @param error The error object to check.
 * @returns `true` if the object is a valid NativeError, `false` otherwise.
 */
export function isNativeError(error: any): error is NativeError {
    return error && typeof error.code === 'string' && typeof error.message === 'string';
}


/**
 * A TypeScript type guard to safely check if a screenshot has been fully analyzed.
 * This is useful for conditionally rendering UI elements that depend on analysis results.
 * @param screenshot The screenshot object to check.
 * @returns `true` if the screenshot has all the properties of an AnalyzedScreenshot, `false` otherwise.
 */
export function isAnalyzed(screenshot: Screenshot): screenshot is AnalyzedScreenshot {
    return screenshot.text != null && screenshot.entities != null && screenshot.category != null;
}
